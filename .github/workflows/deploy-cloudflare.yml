name: Deploy to Cloudflare Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '22.x'

jobs:
  # Job 1: Build for deployment
  build:
    name: Build for Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build application
        run: npm run build

      - name: Verify build
        run: |
          echo "üì¶ Build verification"
          if [ -d "dist" ] && [ -f "dist/index.html" ]; then
            echo "‚úÖ Frontend build successful"
            echo "Build size:"
            du -sh dist/
          else
            echo "‚ùå Build verification failed"
            exit 1
          fi
          
          if [ -d "dist_server" ]; then
            echo "‚úÖ Backend build successful"
          else
            echo "‚ùå Backend build verification failed"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            dist_server/
          retention-days: 7

  # Job 2: Deploy to Cloudflare Pages
  deploy:
    name: Deploy to Cloudflare
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://2027-5a0.pages.dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: 2027
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref_name }}
          wranglerVersion: '3'

      - name: Create deployment record
        run: |
          mkdir -p deployment-logs
          cat > deployment-logs/deployment-${{ github.run_number }}.json << EOF
          {
            "deployment_id": "${{ github.run_id }}",
            "run_number": "${{ github.run_number }}",
            "commit_sha": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "environment": "${{ github.event.inputs.environment || 'production' }}",
            "deployed_by": "${{ github.actor }}",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "status": "deployed"
          }
          EOF
          
          echo "üìù Deployment record created"
          cat deployment-logs/deployment-${{ github.run_number }}.json

      - name: Upload deployment logs
        uses: actions/upload-artifact@v4
        with:
          name: deployment-logs-${{ github.run_number }}
          path: deployment-logs/
          retention-days: 90

  # Job 3: Deployment validation
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Playwright
        run: |
          npm install -D @playwright/test@latest
          npx playwright install --with-deps chromium

      - name: Validate desktop deployment
        run: |
          cat > validate-desktop.js << 'EOF'
          const { chromium } = require('@playwright/test');
          
          (async () => {
            const browser = await chromium.launch();
            const context = await browser.newContext({
              viewport: { width: 1920, height: 1080 }
            });
            
            const page = await context.newPage();
            
            try {
              console.log('üîç Testing deployment on desktop...');
              await page.goto('https://2027-5a0.pages.dev', { 
                timeout: 30000,
                waitUntil: 'domcontentloaded'
              });
              
              // Wait for page to be interactive
              await page.waitForLoadState('networkidle', { timeout: 10000 }).catch(() => {
                console.log('‚ö†Ô∏è Network not idle, continuing...');
              });
              
              // Check page title
              const title = await page.title();
              console.log(`üìÑ Page title: ${title}`);
              
              // Take screenshot
              await page.screenshot({ path: 'deployment-desktop.png', fullPage: true });
              console.log('üì∏ Desktop screenshot captured');
              
              console.log('‚úÖ Desktop deployment validation successful');
            } catch (error) {
              console.error('‚ùå Desktop deployment validation failed:', error.message);
              throw error;
            } finally {
              await browser.close();
            }
          })();
          EOF
          
          node validate-desktop.js

      - name: Validate mobile deployment
        run: |
          cat > validate-mobile.js << 'EOF'
          const { chromium } = require('@playwright/test');
          
          (async () => {
            const browser = await chromium.launch();
            const context = await browser.newContext({
              viewport: { width: 375, height: 667 },
              userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15'
            });
            
            const page = await context.newPage();
            
            try {
              console.log('üîç Testing deployment on mobile...');
              await page.goto('https://2027-5a0.pages.dev', { 
                timeout: 30000,
                waitUntil: 'domcontentloaded'
              });
              
              // Wait for page to be interactive
              await page.waitForLoadState('networkidle', { timeout: 10000 }).catch(() => {
                console.log('‚ö†Ô∏è Network not idle, continuing...');
              });
              
              // Take screenshot
              await page.screenshot({ path: 'deployment-mobile.png', fullPage: true });
              console.log('üì∏ Mobile screenshot captured');
              
              console.log('‚úÖ Mobile deployment validation successful');
            } catch (error) {
              console.error('‚ùå Mobile deployment validation failed:', error.message);
              throw error;
            } finally {
              await browser.close();
            }
          })();
          EOF
          
          node validate-mobile.js

      - name: Upload validation screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-validation-screenshots
          path: |
            deployment-desktop.png
            deployment-mobile.png
          retention-days: 30

  # Job 4: Create deployment audit log
  audit-log:
    name: Create Audit Log
    runs-on: ubuntu-latest
    needs: [deploy, validate-deployment]
    if: always()
    steps:
      - name: Generate comprehensive audit log
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            const auditLog = {
              deployment_info: {
                run_id: context.runId,
                run_number: context.runNumber,
                workflow: context.workflow,
                event_name: context.eventName,
                ref: context.ref,
                sha: context.sha,
                actor: context.actor
              },
              build_status: {
                deploy_status: '${{ needs.deploy.result }}',
                validation_status: '${{ needs.validate-deployment.result }}'
              },
              timestamps: {
                started_at: new Date().toISOString(),
                workflow_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
              },
              environment: {
                node_version: '${{ env.NODE_VERSION }}',
                runner_os: process.platform
              }
            };
            
            console.log('üìã Audit Log:');
            console.log(JSON.stringify(auditLog, null, 2));
            
            // Write to step summary
            await core.summary
              .addHeading('üîç Deployment Audit Log')
              .addTable([
                [{data: 'Field', header: true}, {data: 'Value', header: true}],
                ['Run ID', auditLog.deployment_info.run_id],
                ['Run Number', auditLog.deployment_info.run_number],
                ['Commit SHA', auditLog.deployment_info.sha],
                ['Triggered By', auditLog.deployment_info.actor],
                ['Deploy Status', auditLog.build_status.deploy_status],
                ['Validation Status', auditLog.build_status.validation_status]
              ])
              .addLink('View Workflow Run', auditLog.timestamps.workflow_url)
              .write();

      - name: Comment on commit
        uses: actions/github-script@v7
        if: github.event_name == 'push'
        with:
          script: |
            const deployStatus = '${{ needs.deploy.result }}';
            const validationStatus = '${{ needs.validate-deployment.result }}';
            
            let emoji = deployStatus === 'success' && validationStatus === 'success' ? 'üéâ' : '‚ö†Ô∏è';
            let message = `${emoji} **Deployment Complete**\n\n`;
            message += `- **Deploy Status:** ${deployStatus}\n`;
            message += `- **Validation Status:** ${validationStatus}\n`;
            message += `- **Run:** [#${{ github.run_number }}](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{ github.run_id }})\n`;
            message += `- **Environment:** https://2027-5a0.pages.dev\n`;
            
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: message
            });

  # Job 5: Deployment Summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [build, deploy, validate-deployment, audit-log]
    if: always()
    steps:
      - name: Generate deployment summary
        run: |
          echo "# üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Status" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Deploy: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Validation: ${{ needs.validate-deployment.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Audit Log: ${{ needs.audit-log.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** https://2027-5a0.pages.dev" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed By:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
