name: Health Check and Auto-Repair

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_dispatch:
  deployment_status:

env:
  PRODUCTION_URL: 'https://www.mmc-mms.com'  # Replace with your custom domain
  PREVIEW_URL: 'https://2027-5a0.pages.dev'  # Replace with your Cloudflare Pages URL

jobs:
  health-check:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      actions: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check production deployment
        id: health_check
        run: |
          echo "Checking production URL: ${{ env.PRODUCTION_URL }}"
          
          # Check production site
          PROD_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.PRODUCTION_URL }}" || echo "000")
          echo "prod_status=$PROD_STATUS" >> $GITHUB_OUTPUT
          
          # Check preview site
          PREVIEW_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.PREVIEW_URL }}" || echo "000")
          echo "preview_status=$PREVIEW_STATUS" >> $GITHUB_OUTPUT
          
          # Check if production is healthy
          if [ "$PROD_STATUS" = "200" ]; then
            echo "health_status=healthy" >> $GITHUB_OUTPUT
            echo "‚úÖ Production site is healthy (HTTP $PROD_STATUS)"
          else
            echo "health_status=unhealthy" >> $GITHUB_OUTPUT
            echo "‚ùå Production site is unhealthy (HTTP $PROD_STATUS)"
          fi
          
          # Check if preview is healthy
          if [ "$PREVIEW_STATUS" = "200" ]; then
            echo "‚úÖ Preview site is healthy (HTTP $PREVIEW_STATUS)"
          else
            echo "‚ö†Ô∏è Preview site returned HTTP $PREVIEW_STATUS"
          fi

      - name: Log health check results
        run: |
          mkdir -p logs
          echo "Health Check - $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> logs/health-check.log
          echo "Production Status: ${{ steps.health_check.outputs.prod_status }}" >> logs/health-check.log
          echo "Preview Status: ${{ steps.health_check.outputs.preview_status }}" >> logs/health-check.log
          echo "Overall Health: ${{ steps.health_check.outputs.health_status }}" >> logs/health-check.log
          echo "---" >> logs/health-check.log

      - name: Create issue if unhealthy
        if: steps.health_check.outputs.health_status == 'unhealthy'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üö® Deployment Health Check Failed - ${new Date().toISOString()}`;
            const body = `### Deployment Health Check Failed
            
            **Production URL:** ${{ env.PRODUCTION_URL }}
            **Status Code:** ${{ steps.health_check.outputs.prod_status }}
            **Time:** ${new Date().toUTCString()}
            
            **Preview URL:** ${{ env.PREVIEW_URL }}
            **Status Code:** ${{ steps.health_check.outputs.preview_status }}
            
            The automated health check detected that the production deployment is not responding correctly.
            
            ### Next Steps
            1. Check Cloudflare Pages dashboard for deployment status
            2. Review recent commits for breaking changes
            3. Check application logs for errors
            4. Auto-repair workflow will attempt to redeploy
            
            **Auto-generated by Health Check workflow**`;
            
            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'deployment-failure'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes('Deployment Health Check Failed')
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['deployment-failure', 'auto-generated']
              });
            }

      - name: Trigger auto-repair if needed
        if: steps.health_check.outputs.health_status == 'unhealthy'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'auto-repair.yml',
              ref: 'main'
            });

  verify-deployment:
    needs: health-check
    runs-on: ubuntu-latest
    if: needs.health-check.outputs.health_status == 'healthy'
    
    steps:
      - name: Verify deployment features
        run: |
          echo "‚úÖ Deployment is healthy"
          echo "Running additional verification checks..."
          
          # Check if key resources are accessible
          RESOURCES=(
            "${{ env.PRODUCTION_URL }}/assets"
            "${{ env.PRODUCTION_URL }}/index.html"
          )
          
          for resource in "${RESOURCES[@]}"; do
            status=$(curl -s -o /dev/null -w "%{http_code}" "$resource" || echo "000")
            if [ "$status" = "200" ] || [ "$status" = "301" ] || [ "$status" = "302" ]; then
              echo "‚úÖ $resource - OK ($status)"
            else
              echo "‚ö†Ô∏è $resource - Warning ($status)"
            fi
          done

      - name: Post success comment
        if: github.event_name == 'deployment_status'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('‚úÖ All health checks passed successfully');
