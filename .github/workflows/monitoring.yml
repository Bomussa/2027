name: Monitoring and Logging

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
  deployment_status:

env:
  PRODUCTION_URL: 'https://www.mmc-mms.com'
  PREVIEW_URL: 'https://2027-5a0.pages.dev'

jobs:
  collect-metrics:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Collect deployment metrics
        id: metrics
        run: |
          echo "Collecting metrics at $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          
          # Create logs directory
          mkdir -p logs/metrics
          
          # Collect response times
          PROD_TIME=$(curl -o /dev/null -s -w "%{time_total}" "${{ env.PRODUCTION_URL }}" || echo "0")
          PREVIEW_TIME=$(curl -o /dev/null -s -w "%{time_total}" "${{ env.PREVIEW_URL }}" || echo "0")
          
          # Collect HTTP status
          PROD_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.PRODUCTION_URL }}" || echo "000")
          PREVIEW_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.PREVIEW_URL }}" || echo "000")
          
          # Collect response size
          PROD_SIZE=$(curl -s -w "%{size_download}" -o /dev/null "${{ env.PRODUCTION_URL }}" || echo "0")
          PREVIEW_SIZE=$(curl -s -w "%{size_download}" -o /dev/null "${{ env.PREVIEW_URL }}" || echo "0")
          
          # Store metrics
          TIMESTAMP=$(date -u +"%Y-%m-%d_%H-%M-%S")
          METRICS_FILE="logs/metrics/metrics-${TIMESTAMP}.json"
          
          cat > "$METRICS_FILE" << EOF
          {
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "production": {
              "url": "${{ env.PRODUCTION_URL }}",
              "status": ${PROD_STATUS},
              "response_time": ${PROD_TIME},
              "size_bytes": ${PROD_SIZE}
            },
            "preview": {
              "url": "${{ env.PREVIEW_URL }}",
              "status": ${PREVIEW_STATUS},
              "response_time": ${PREVIEW_TIME},
              "size_bytes": ${PREVIEW_SIZE}
            }
          }
          EOF
          
          echo "metrics_file=${METRICS_FILE}" >> $GITHUB_OUTPUT
          echo "prod_status=${PROD_STATUS}" >> $GITHUB_OUTPUT
          echo "preview_status=${PREVIEW_STATUS}" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Metrics collected and saved to ${METRICS_FILE}"

      - name: Generate monitoring report
        run: |
          mkdir -p logs/reports
          REPORT_DATE=$(date -u +"%Y-%m-%d")
          REPORT_FILE="logs/reports/monitoring-${REPORT_DATE}.md"
          
          cat > "$REPORT_FILE" << 'EOF'
          # Monitoring Report - ${{ env.PRODUCTION_URL }}
          
          **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## Current Status
          
          ### Production Deployment
          - **URL:** ${{ env.PRODUCTION_URL }}
          - **Status:** ${{ steps.metrics.outputs.prod_status }}
          - **Health:** ${{ steps.metrics.outputs.prod_status == '200' && '‚úÖ Healthy' || '‚ùå Unhealthy' }}
          
          ### Preview Deployment
          - **URL:** ${{ env.PREVIEW_URL }}
          - **Status:** ${{ steps.metrics.outputs.preview_status }}
          - **Health:** ${{ steps.metrics.outputs.preview_status == '200' && '‚úÖ Healthy' || '‚ö†Ô∏è Check Required' }}
          
          ## Metrics
          
          Detailed metrics have been saved to: `${{ steps.metrics.outputs.metrics_file }}`
          
          ## Recent Deployments
          
          Check the [Actions tab](../../actions) for deployment history.
          
          ---
          *Auto-generated by Monitoring workflow*
          EOF
          
          echo "‚úÖ Report generated: ${REPORT_FILE}"

      - name: Check for performance degradation
        id: performance_check
        run: |
          PROD_TIME=$(curl -o /dev/null -s -w "%{time_total}" "${{ env.PRODUCTION_URL }}" || echo "0")
          
          # Convert to milliseconds for comparison
          PROD_TIME_MS=$(echo "$PROD_TIME * 1000" | bc)
          
          # Threshold: 5 seconds (5000ms)
          THRESHOLD=5000
          
          if (( $(echo "$PROD_TIME_MS > $THRESHOLD" | bc -l) )); then
            echo "performance_issue=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Performance degradation detected: ${PROD_TIME_MS}ms (threshold: ${THRESHOLD}ms)"
          else
            echo "performance_issue=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Performance within acceptable range: ${PROD_TIME_MS}ms"
          fi

      - name: Create performance issue
        if: steps.performance_check.outputs.performance_issue == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `‚ö†Ô∏è Performance Degradation Detected - ${new Date().toISOString()}`;
            const body = `### Performance Alert
            
            The monitoring system has detected slow response times for the production deployment.
            
            **URL:** ${{ env.PRODUCTION_URL }}
            **Time:** ${new Date().toUTCString()}
            
            ### Recommendations
            1. Review recent deployments for performance regressions
            2. Check Cloudflare analytics for traffic spikes
            3. Analyze bundle size for bloat
            4. Review server-side rendering performance
            
            **Auto-generated by Monitoring workflow**`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['performance', 'monitoring', 'auto-generated']
            });

      - name: Archive old logs
        run: |
          # Keep only last 30 days of metrics
          find logs/metrics -type f -name "metrics-*.json" -mtime +30 -delete || true
          find logs/reports -type f -name "monitoring-*.md" -mtime +30 -delete || true
          echo "‚úÖ Old logs archived"

      - name: Commit logs
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          git add logs/ || true
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: update monitoring logs [skip ci]"
            git push || echo "Could not push logs (this is normal if logs directory is gitignored)"
          fi

  analyze-trends:
    needs: collect-metrics
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Analyze deployment trends
        run: |
          echo "Analyzing deployment trends..."
          
          if [ -d "logs/metrics" ]; then
            METRIC_COUNT=$(find logs/metrics -name "metrics-*.json" -type f | wc -l)
            echo "üìä Total metrics collected: ${METRIC_COUNT}"
            
            if [ $METRIC_COUNT -gt 0 ]; then
              echo "Last 5 metrics:"
              find logs/metrics -name "metrics-*.json" -type f | sort -r | head -5 | while read file; do
                echo "  - $(basename $file)"
              done
            fi
          else
            echo "No metrics directory found yet"
          fi

      - name: Summary
        run: |
          echo "‚úÖ Monitoring and logging workflow completed"
          echo "üìä Metrics collected and analyzed"
          echo "üìù Reports generated"
